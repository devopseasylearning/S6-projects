NAME: orders
LAST DEPLOYED: Sun Jul  9 17:22:12 2023
NAMESPACE: default
STATUS: pending-install
REVISION: 1
TEST SUITE: None
HOOKS:
MANIFEST:
---
# Source: orders/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: orders
  labels:
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: orders
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: orders
    helm.sh/chart: orders-0.0.1
---
# Source: orders/templates/orders-rabbitmq-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: orders-rabbitmq
data:
---
# Source: orders/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: orders-db
data:
    password: dk1vZzM2UEV4djh6aDNSSQ==
    username: b3JkZXJz
---
# Source: orders/templates/cm.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name:  orders
data:
    SPRING_DATASOURCE_READER_URL: jdbc:mariadb://orders-mysql:3306/orders
    SPRING_DATASOURCE_WRITER_URL: jdbc:mariadb://orders-mysql:3306/orders
    SPRING_PROFILES_ACTIVE: mysql,rabbitmq
    SPRING_RABBITMQ_ADDRESSES: amqp://orders-rabbitmq:5672
---
# Source: orders/templates/orders-mysql-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: orders-mysql
  labels:
    app.kubernetes.io/component: mysql
    app.kubernetes.io/instance: orders
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: orders
    helm.sh/chart: orders-0.0.1
spec:
  type: ClusterIP
  ports:
    - port: 3306
      targetPort: mysql
      protocol: TCP
      name: mysql
  selector:
    app.kubernetes.io/component: mysql
    app.kubernetes.io/instance: orders
    app.kubernetes.io/name: orders
---
# Source: orders/templates/orders-rabbitmq-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: orders-rabbitmq
  labels:
    app.kubernetes.io/component: rabbitmq
    app.kubernetes.io/instance: orders
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: orders
    helm.sh/chart: orders-0.0.1
spec:
  type: ClusterIP
  ports:
    - port: 5672
      targetPort: amqp
      protocol: TCP
      name: amqp
    - port: 15672
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/component: rabbitmq
    app.kubernetes.io/instance: orders
    app.kubernetes.io/name: orders
---
# Source: orders/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: orders
  labels:
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: orders
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: orders
    helm.sh/chart: orders-0.0.1
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: orders
    app.kubernetes.io/name: orders
---
# Source: orders/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders
  labels:
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: orders
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: orders
    helm.sh/chart: orders-0.0.1
spec:
  replicas: 1
  strategy:
      rollingUpdate:
        maxUnavailable: 1
      type: RollingUpdate
  selector:
    matchLabels:
      app.kuberneres.io/owner: retail-store-sample
      app.kubernetes.io/component: service
      app.kubernetes.io/instance: orders
      app.kubernetes.io/name: orders
  template:
    metadata:
      annotations:
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app.kuberneres.io/owner: retail-store-sample
        app.kubernetes.io/component: service
        app.kubernetes.io/instance: orders
        app.kubernetes.io/name: orders
    spec:
      serviceAccountName: orders
      securityContext:
        fsGroup: 1000
      containers:
        - name: orders
          env:
        - name: JAVA_OPTS
          value: -XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/urandom
        - name: SPRING_DATASOURCE_WRITER_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: orders-db
        - name: SPRING_DATASOURCE_WRITER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: orders-db
        - name: SPRING_DATASOURCE_READER_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: orders-db
        - name: SPRING_DATASOURCE_READER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: orders-db
          envFrom:
        - secretRef:
            name: orders-rabbitmq
        - configMapRef:
            name: orders
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          image: "public.ecr.aws/aws-containers/retail-store-sample-orders:0.4.0"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
            initialDelaySeconds: 45
            periodSeconds: 3
          resources:
            limits:
              memory: 512Mi
            requests:
              cpu: 128m
              memory: 512Mi
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
      volumes:
            - emptyDir:
                medium: Memory
              name: tmp-volume
---
# Source: orders/templates/orders-sts.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: orders-mysql
  labels:
    app.kubernetes.io/component: mysql
    app.kubernetes.io/instance: orders
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: orders
    helm.sh/chart: orders-0.0.1
spec:
  replicas: 1
  serviceName: orders-mysql
  selector:
    matchLabels:
    app.kubernetes.io/component: mysql
    app.kubernetes.io/instance: orders
    app.kubernetes.io/name: orders
  template:
    metadata:
      labels:
    app.kubernetes.io/component: mysql
    app.kubernetes.io/instance: orders
    app.kubernetes.io/name: orders
    spec:
      containers:
        - name: mysql
          image: "mysql:5.7"
          imagePullPolicy: IfNotPresent
          env:
             - name: MYSQL_ROOT_PASSWORD
               value: my-secret-pw
             - name: MYSQL_DATABASE
               value: orders
             - name: MYSQL_USER
               valueFrom:
                 secretKeyRef:
                   name: orders-db
                   key: username
             - name: MYSQL_PASSWORD
               valueFrom:
                 secretKeyRef:
                   name: orders-db
                   key: password
          args:
            - --ignore-db-dir=lost+found
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
          ports:
            - name: mysql
              containerPort: 3306
              protocol: TCP
      volumes:
      - name: data
        emptyDir: {}
---
# Source: orders/templates/rabatmq-sts.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: orders-rabbitmq
  labels:
    app.kubernetes.io/component: rabbitmq
    app.kubernetes.io/instance: orders
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: orders
    helm.sh/chart: orders-0.0.1
spec:
  replicas: 1
  serviceName: orders-rabbitmq
  selector:
    matchLabels:
    app.kubernetes.io/component: rabbitmq
    app.kubernetes.io/instance: orders
    app.kubernetes.io/name: orders
  template:
    metadata:
      labels:
    app.kubernetes.io/component: rabbitmq
    app.kubernetes.io/instance: orders
    app.kubernetes.io/name: orders
    spec:
      containers:
        - name: rabbitmq
          image: "rabbitmq:3-management"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: data
              mountPath: /var/lib/rabbitmq/mnesia
          ports:
             - port: 5672
               targetPort: amqp
               protocol: TCP
               name: amqp
             - port: 15672
               targetPort: http
               protocol: TCP
               name: http
      volumes:
      - name: data
        emptyDir: {}

NOTES:
1. Get the application URL by running these commands:
  export POD_NAME=$(kubectl get pods --namespace default -l "app.kubernetes.io/name=orders,app.kubernetes.io/instance=orders" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace default $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace default port-forward $POD_NAME 8080:$CONTAINER_PORT
